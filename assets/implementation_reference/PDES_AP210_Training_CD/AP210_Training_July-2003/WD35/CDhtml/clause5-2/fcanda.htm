<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN""http://www.w3.org/TR/REC-html40/strict.dtd">
<HTML
><HEAD
><LINK
TITLE="AP-PUB Style Sheet"
HREF="../ap-pub.css"
REL="stylesheet"
TYPE="text/css"><TITLE
>Fundamental concepts and assumptions</TITLE
><META
NAME="generator"
CONTENT="Jade 1.1/STEP AP to HTML 4.0"></HEAD
><BODY
><DIV
CLASS="FCANDACL3"
><H2
><A
NAME="fcanda"
></A
>5.2.1 Fundamental concepts and assumptions</H2
>This part of ISO 10303 is designed to be used in the concurrent engineering of modular electronic 
products.  A fundamental concept of this schema is that the organization controls the configuration 
of product models for these types of product designs.  This schema is not designed to 
control product designs through drawing control.  It is designed to provide a vehicle to control 
the configuration of the design and associated data.  The design in this context includes the 
requirements and constraints exchanged between the design organization, data suppliers (e.g., 
component suppliers, value added suppliers), product suppliers (e.g., piece part vendors, substrate
 vendors), and the customers or marketing representatives for those customers. Several 
engineering disciplines may share data using this schema (e.g., system, mechanical, electrical, 
manufacturing, inspection, logistics) for product definition and product analysis purposes.  This 
schema provides requirements definition using requirements property definition, decomposition 
and operations on property definition.  This schema provides a functional definition using externally 
defined models or the functional decomposition model defined in this schema.  This 
schema provides a physical definition for packages, piece parts, interconnect substrate, bare die, 
mechanical parts, and assemblies.  The physical definition includes a geometric dimensioning and 
tolerancing model that may be applied to any physical model.  This schema provides design and 
usage views for functional and physical models to support design abstraction and intellectual 
property aspects.  This schema provides data suppliers a standard infrastructure with which to 
build explicit product data models for modular electronic products that may be incorporated 
into a piece part or technology library.  The explicit product data models may be standardized 
as instances of this schema.  This schema provides support for a design organization to archive 
data using this schema as a design view in one product category and the marketing organization 
to specify the usage view in a more generic category.  The functional usage view in this schema 
includes an explicit interface definition to allow integration with external simulation environments.  

The support for this includes the capability to define product terminals only in a usage view. 
 The product models in this schema include both abstract functional product model and 
physical product models.  Inclusion of the functional model provides the ability to categorize 
functional models using the product_category entity.  This schema provides support for multiple 
functional definitions to exist in a repository for a particular usage view, but the specific 
definition desired is included in the functional model exchanged.  Parameters  (e.g., resistance) 
whose values are fundamental properties of the materials and their composition and therefore 
independent of the product version may be exchanged using the subtypes of product_category in 
this schema.  Parameters (e.g., timing related) that are dependent on the version of the product 
may be exchanged using characteristics associated with a particular product_definition entity.  
Signal properties and composition may be exchanged using external_definition for the interface to 
industry domain specific name definitions.<DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="49"
></A
>5.2.1.1 Relating the shape of a product to its configuration data</H3
>The shape of products in this part of ISO 10303 is represented by the  shape_representation 
entity. This entity and its subtypes define the  geometric or topological entities which make 
up a particular  representation type. Each product or assembly that is of interest  will be given 
by an instance of the product entity. Each product will in  turn have at least one version 
given by an instance of the product_definition_formation entity. Each version may have one 
or more definitions  given by the product_definition entity. Each definition may have its shape 
represented. This is done using the AIM entities by relating the  product_definition instance to 
the appropriate shape_representation instance.  The concept of  the shape of a product_definition 
is given by an instance of  the entity product_definition_shape. That shape of the product is  then 
connected to the shape_representation entity by an instance of shape_definition_representation. 

A shape_definition_representation inherits  attributes from its supertype property_definition_representation 
that reference the shape_representation entity that contains the geometry  or 
topology for the shape of the product and a select type called  characterized_definition. This 
type allows for the representation of a  shape_aspect, shape_aspect_relationship, characterized_object, 
or a characterized_product_definition which is also a select type. To specify that the 
property of  interest is the  shape of the product_definition the product_definition_shape subtype of 
property_definition shall be used. The product_definition_shape entity is constrained to use the 
characterized_product_definition select type. The characterized_product_definition select type 
allows for  the representation of a product_definition or a product_definition_relationship via a 
reference through its select list. This reference  ensures that the product_definition_shape entity 
will be used to define the shape of a product_definition. If the property of interest is an aspect 
of the shape of the product_definition or the relationship between two aspects of the shape of the 
product_definition the property_definition shall be used  and its definition attribute shall 
reference an instance of shape_aspect  or shape_aspect_relationship. In order to specify the shape 
of a product the product_definition entity will be referenced here.</DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="51"
></A
>5.2.1.2 Relating the shape of a component to the shape of its assembly</H3
>There are two methods that may be used to relate the shape of a component to the shape of 
the assembly in which it is assembled.  The first method consists of defining the shape for each 
component and assembly, and then relating the two shapes and providing the information that 
defines the orientation of the component with respect to the assembly through a transformation. 
 The second method consists of defining the shape for each component and assembly, and 
then incorporating the shape of the component directly in the shape of the assembly.  The first 
method shall be used to relate the shapes that are represented by different representation types.  

The second method may be used for the incorporation of the representation of a component 
into the representation of an assembly if the two types are the same.  Both methods employ 
the shape_representation and product_definition entities.  The first method also employs the 
product_definition_relationship, shape_representation_relationship AND representation_relationship_with_transformation 
(i.e., an instance of each entity forming a complex entity instance of the 
two entities with an AND relationship) and context_dependent_shape_representation entities.  

The second method employs the mapped_item and representation_map entities. When 
using the first method to relate the shape of the component to the shape of the assembly, 
each of the shape_representation entities that define the shapes of the component and assembly 
product_definitions is related through references in the shape_representation_relationship entity.  
Orientation information, in this case, will be provided by the formation of a complex instance 
of the shape_representation_relationship AND representation_relationship_with_transformation 
entities.  The representation_relationship_with_transformation entity references a transformation 
which is a select type allowing the orientation to be defined using an axis2_placement_3d entity in 
each representation for an item_defined_transformation or a cartesian_transformation_operator 
entity for a functionally_defined_transformation. In addition, an instance of 
the context_dependent_shape_representation must be given to explicitly relate the shape_representation_relationship 
that defines the relationship of the two shapes to the product_definition_relationship that 
defines the assembly-component relationship between the two product_definitions. 

When using the second method to relate the shape of the component to the shape of the assembly, the 
shape_representation entity that defines the geometry or topology for the shape of the component 
product is referenced by an instance of a representation_map entity that is referenced by 
the mapping_source attribute of an instance of the mapped_item entity.  The attribute mapped_representation 
of the representation_map will reference the shape_representation subtype that 
defines the representation of the shape.  The instance of the mapped_item entity is then added 
to the set of items in the shape_representation entity that defines the geometry or topology for 
the assembly product.</DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="53"
></A
>5.2.1.3 Types of shape representation</H3
>This part of ISO 10303 defines several types of representation for shapes of items - both 2d and 
3d wireframe representations using edge based and shell based models, 2d wireframe 
representations that are geometrically bounded, surface models that are geometrically bounded, CSG solid 
models, advanced boundary representation solid models, extruded solid models, 2d Curves and 
basic 2d Curves.  Each of the 3d types of representation is self contained meaning that one type 
may not contain another type.  Each of the types is given by a subtype of the shape_representation 
entity.  Each subtypecontains local rules that govern the types of geometric or topological 
entities that can be used in it.  Every shape_representation must be one of the subtypes unless 
it is used as the representation of the shape of an assembly used in method one above. 

In that case, the shape_representation instance will contain only axis2_placement_3d entities in its 
set of items in order to define the orientation of the components' representations in it.  Since the 
rules in each of the subtypes will conflict with each other, any shape_representation that is 
referenced by a representation_map to implement method two above must be of the same type 
as the shape_representation that has the mapped_item that references that representation_map in its set of items.</DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="55"
></A
>5.2.1.4 Use of global rules</H3
>Many of the relationships among different entities in the integrated resource parts of ISO 10303 
are specified using the most generic cardinality of zero or more between two related entities.  This 
cardinality means that the relationship is optional or there may be one or more instances of a related 
entity that is related to a single instance of the relating entity.  This part of ISO 10303 uses 
global rules to constrain that cardinality.  In some cases the constraint is made to be one to one, \and in some instances at least one.  <DIV
CLASS="EXAMPLE"
><P
></P
>EXAMPLE: Examples of these rules include contract_requires_person_organization,
approval_requires_approval_date_time, and certification_requires_approval 
for exactly one, and change_request_requires_person_organization and
 product_requires_product_version for one or more.</DIV
>
 

 Global rules are also used to restrict the values of STRING type attributes to be 
only those that are applicable within the context of electronic assembly, interconnect and 
packaging design. 
<DIV
CLASS="EXAMPLE"
><P
></P
>EXAMPLE:  Examples of these rules are restrict_approval_status and 
restrict_person_organization_role.</DIV
>
  

Global rules are also used to collect in one location all the constraints required to implement a given ARM concept. 
<DIV
CLASS="EXAMPLE"
><P
></P
>EXAMPLE: Examples of these rules include operational_requirement_occurrence_relationship_constraint,
geometric_tolerance_qualifier_constraint, and feature_group_relationship_constraint.</DIV
></DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="60"
></A
>5.2.1.5 Assignment of units</H3
>Units are assigned to the representation of shape on a global basis.  This is done by the creation 
of an instance of the global_unit_assigned_context.  This entity contains an attribute that allows 
for a set of units to be assigned to a representation_context.  Each of the shape_representation 
entities has a context for its representation.  If units of measure are desired for a particular 
instance of shape_representation then that instance shall have a global_unit_assigned_context in 
its context_of_items attribute. </DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="62"
></A
>5.2.1.6 Terminal definition</H3
>Terminals are defined as aspects of the shape of a product in this schema.  This is true for 
both terminals of functional products and terminals of physical products.  The properties of 
the terminals interconnected in a network defined by the functional_network_definition may 
be evaluated by experimental means to determine suitability of the product_definition. The 
geometric representation of the functional product terminal is the schematic symbol for the 
terminal.  The geometric representation of the functional product shape is the schematic symbol for the functional product.<DIV
CLASS="NOTE"
><P
></P
>NOTE: This edition of this part of ISO 10303 does not standardize the exchange of presentation of 
geometric representations of terminals of functional products or shapes of functional products. In 
this edition of the standard, there is no standardized way to specify the position of the schematic 
terminal symbol in the schematic symbol for the functional product.  This structure is included to 
assure interoperability with other 
parts of ISO 10303. </DIV
></DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="65"
></A
>5.2.1.7 Product instances</H3
>This schema separates the "part" in the "part-assembly" relationship into two or three entities: one or two instances of product_definition 
and a corresponding component_definition.  If there is only one instance of product_definition, then there is no separate 'design' for the part.  If there are two instances of product definition then one of them is the design and the other is the 'design usage'.  This separation is controlled by a rule 
in component_definition that the product_definition_formation for component_definition and the 
product_definition that corresponds to the "part" concept is the same product_definition_formation.  
The correspondence is established by an instance of product_definition_relationship with a 
name of "instantiated part".  The correspondence between the design and the design usage is established by an instace of product_definition_relationship with a name of 'design usage'.</DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="67"
></A
>5.2.1.8 Change management</H3
>This schema provides action, action_directive, add_design_object_assignment, change, change_request,
 change_from_design_object_assignment, change_to_design_object_assignment, delete_object_assignment,
 and product_definition_relationship entities to support design management processes.  
A data set that incorporates add, change, or delete shall include any required action_assignment 
subtype and the product_definition_relationship that identifies the previous product_definition 
and the current product_definition.  Requests for change and specific change directions are provided.</DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="69"
></A
>5.2.1.9 Functional network definition</H3
>This schema 
provides functional_unit, functional_unit_terminal_definition, component_functional_unit, 
component_functional_terminal, and network_node_definition to exchange network 
listings (using a nodal formulation) of functional objects.</DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="71"
></A
>5.2.1.10 Geometric dimensioning and tolerancing</H3
>Each instance of physical_unit_geometric_tolerance along with supporting entity instances (e.g., 
property_definition with a description of "datum system property with material conditions") is 
intended to convey the data associated with a geometric tolerance requirement that is included 
in a single segment of a feature control frame of a technical drawing.  Typically, feature control 
frames only have one segment. However, with composite geometric tolerances (i.e., composite 
position tolerance, composite linear profile tolerance, and composite surface profile tolerance) 
the feature control frame consists of an ordered set of segments. Associated with this set 
are certain order-dependent requirements as to the values that may be placed in the various 
compartments of the segments of these composite feature control frames.  <DIV
CLASS="EXAMPLE"
><P
></P
>EXAMPLE: If one or more data are specifiedin a lower segment of a 
composite feature control frame they must also be specified in segments 
that are listed above it.</DIV
>

To convey the data associated with a composite feature control frame, instances of geometric_tolerance_relationship
 are used to create an ordered set of physical_unit_geometric_tolerance.  Additionally, constraints defined 
within the relevant physical_unit_geometric_tolerance (i.e., position_tolerance, linear_profile_tolerance, 
and surface_profile_tolerance) are used to specify the order-dependent requirements and to 
insure a valid data structure.</DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="74"
></A
>5.2.1.11 Physical network definition</H3
>This schema provides physical_unit_network_definition, physical_connectivity_definition, and component_terminal to exchange network listings (using a nodal formulation) of physical objects.</DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="76"
></A
>5.2.1.12 Product classification</H3
>This schema provides predefined product classifications of assembly, bare die, functionality, interconnect, material, package, physical network design, piece part, printed part, requirements model, simulation model, standard part, technology specific model, and template model.  These predefined product classifications may require specific types of product_definition to support them or specific context values.<DIV
CLASS="EXAMPLE"
><P
></P
>EXAMPLE: It is valid to have a package classification and to have an instance of interconnect_definition associated with it, but
an instance of package will also exist that references that product instance.</DIV
></DIV
><DIV
CLASS="CLAUSECL4"
><H3
><A
NAME="79"
></A
>5.2.1.13 Requirements definition</H3
>This schema provides group_product_definition, group_shape_aspect, grouped_requirements_property,
 mounting_restriction_area,requirement_allocation_group, requirements_property, and 
requirements_property_group to convey the data associated with technical requirements and the 
allocation of those requirementsto product data.</DIV
></DIV
></BODY
></HTML
>